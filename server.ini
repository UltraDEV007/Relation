[uwsgi]

module = server:app
master = true

socket = 0.0.0.0:8080
protocol = http
single-interpreter = true

# HTTP serving avoids the need for an Nginx container
http-enable-proxy-protocol = true
http-auto-chunked = true
http-keepalive = 600
http-timeout = 600
socket-timeout = 600

# Better startup/shutdown in docker:
die-on-term = true
lazy-apps = false
need-app = true
no-defer-accept = true

vacuum = true
master = true
enable-threads = true
thunder-lock = true

# Avoid errors on aborted client connections
ignore-sigpipe = true
ignore-write-errors = true
disable-write-exception = true

# Limits, and kill requests after 120 seconds
harakiri = 180
harakiri-verbose = true
post-buffering = 4096
buffer-size = 65535
py-callos-afterfork = true

max-requests = 120                  ; Restart workers after this many requests
max-worker-lifetime = 3600           ; Restart workers after this many seconds
reload-on-rss = 2048                 ; Restart workers after this much resident memory
worker-reload-mercy = 60             ; How long to wait before forcefully killing workers

; change to dir containing this config
chdir = %d
; logto variable would cause failure of uwsgi reading config
; logto = /path/to/log/uwsgi.log
; vacuum = true
stats = :1717
stats-http = true

cheaper-algo = busyness
;processes = 128                      ; Maximum number of workers allowed
processes = 16                      ; Maximum number of workers allowed
cheaper = 2                          ; Minimum number of workers allowed
cheaper-initial = 4                 ; Workers created at startup
cheaper-overload = 3                 ; Length of a cycle in seconds
cheaper-step = 2                    ; How many workers to spawn at a time

cheaper-busyness-multiplier = 30     ; How many cycles to wait before killing workers
cheaper-busyness-min = 30            ; Below this threshold, kill workers (if stable for multiplier cycles)
cheaper-busyness-max = 75            ; Above this threshold, spawn new workers
cheaper-busyness-backlog-alert = 16  ; Spawn emergency workers if more than this many requests are waiting in the queue
cheaper-busyness-backlog-step = 2    ; How many emergency workers to create if there are too many requests in the queue